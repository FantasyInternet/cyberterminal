(module
  (import "api" "pushFromMemory" (func $pushFromMemory (param i32) (param i32)))
  (import "api" "popToMemory" (func $popToMemory (param i32) ))
  (import "api" "log" (func $log))
  (import "api" "setDisplayMode" (func $setDisplayMode (param i32) (param i32) ))
  (import "api" "displayMemory" (func $displayMemory (param i32) (param i32) ))
  (import "api" "getMouseX" (func $getMouseX (result i32) ))
  (import "api" "getMouseY" (func $getMouseY (result i32) ))
  (import "api" "getMousePressed" (func $getMousePressed (result i32) ))
  (import "api" "getGameAxisX" (func $getGameAxisX (result f32) ))
  (import "api" "getGameAxisY" (func $getGameAxisY (result f32) ))
  (import "api" "getGameButtonA" (func $getGameButtonA (result i32) ))
  (import "api" "getGameButtonB" (func $getGameButtonB (result i32) ))
  (import "api" "getGameButtonX" (func $getGameButtonX (result i32) ))
  (import "api" "getGameButtonY" (func $getGameButtonY (result i32) ))
  (import "api" "startTone" (func $startTone (param i32) (param i32) ))
  (import "api" "stopTone" (func $stopTone (param i32) ))
  ;;(import "api" "fillRect" (func $fillRect (param i32) (param i32) (param i32) (param i32) (param i32) (param i32) (param i32)))
  (memory $memory 1)
  (export "memory" (memory $memory))
  (data (i32.const 10) "Hello world from WASM!")

  ;; Memory management
  (global $partIndexOffset (mut i32) (i32.const 0))
  (func $getPartCount (result i32)
    (i32.div_u (i32.load (get_global $partIndexOffset)) (i32.const 4))
  )
  (func $getPartOffset (param $id i32) (result i32)
    (local $offset i32)
    (set_local $offset (get_global $partIndexOffset))
    (if (i32.gt_u (get_local $id) (i32.const 0)) (then
      (set_local $offset (i32.load (i32.add (get_global $partIndexOffset) (i32.mul (get_local $id) (i32.const 4)))))
    ))
    (i32.add (get_local $offset) (i32.const 4))
  )
  (func $getPartLength (param $id i32) (result i32)
    (i32.load (i32.sub (call $getPartOffset (get_local $id)) (i32.const 4)))
  )

  (func $getNextPart (param $fromOffset i32) (result i32)
    (local $pos i32)
    (local $partsLeft i32)
    (local $bestOffset i32)
    (local $bestId i32)
    (local $offset i32)
    (local $id i32)
    (set_local $pos (get_global $partIndexOffset))
    (set_local $partsLeft (call $getPartCount))
    (set_local $bestOffset (i32.mul (current_memory) (i32.const 65536)))
    (set_local $bestId (i32.add (get_local $partsLeft) (i32.const 1)))
    (set_local $offset (get_global $partIndexOffset))
    (set_local $id (i32.const 0))
    (block (loop
      (if (i32.and (i32.lt_u (get_local $offset) (get_local $bestOffset)) (i32.ge_u (get_local $offset) (get_local $fromOffset))) (then
        (set_local $bestId (get_local $id))
        (set_local $bestOffset (get_local $offset))
      ))
      (br_if 1 (i32.le_u (get_local $partsLeft) (i32.const 0)))
      (set_local $pos (i32.add (get_local $pos) (i32.const 4)))
      (set_local $id  (i32.add (get_local $id)  (i32.const 1)))
      (set_local $offset (i32.load (get_local $pos)))
      (set_local $partsLeft (i32.sub (get_local $partsLeft) (i32.const 1)))
      (br 0)
    ))
    (get_local $bestId)
  )

  (func $alloc (param $len i32) (result i32)
    (local $offset i32)
    (local $partCount i32)
    (local $id i32)
    (local $nextOffset i32)
    (set_local $offset (i32.const 0))
    (set_local $len (i32.add (get_local $len) (i32.const 4)))
    (set_local $partCount (call $getPartCount))
    (block (loop
      (set_local $id (call $getNextPart (get_local $offset)))
      (if (i32.gt_u (get_local $id) (get_local $partCount)) (then
        (set_local $nextOffset (i32.mul (current_memory) (i32.const 65536)))
      )(else
        (set_local $nextOffset (call $getPartOffset (get_local $id)))
      ))
      (br_if 1 (i32.lt_u (i32.add (get_local $offset) (get_local $len)) (get_local $nextOffset)))
      (if (i32.gt_u (get_local $id) (get_local $partCount)) (then
        (if (i32.lt_s (grow_memory (i32.const 1)) (i32.const 0)) (then
          (unreachable)
        ))
        (set_local $offset (i32.const 0))
      )(else
        (set_local $offset (i32.add (get_local $nextOffset) (call $getPartLength (get_local $id))))
      ))
      (br 0)
    ))
    (set_local $len (i32.sub (get_local $len) (i32.const 4)))
    (i32.store (get_local $offset) (get_local $len))
    (get_local $offset)
  )
  (func $resizePart (param $id i32) (param $len i32)
    (local $offset i32)
    (local $nextId i32)
    (local $nextOffset i32)
    (local $newOffset i32)
    (set_local $offset (call $getPartOffset (get_local $id)))
    (set_local $len (i32.add (get_local $len) (i32.const 4)))
    (set_local $nextId (call $getNextPart (get_local $offset)))
    (set_local $nextOffset (call $getPartOffset (get_local $nextId)))
    (if (i32.lt_u (i32.add (get_local $offset) (get_local $len)) (get_local $nextOffset)) (then
      (set_local $offset (i32.sub (get_local $offset) (i32.const 4)))
      (set_local $len    (i32.sub (get_local $len)    (i32.const 4)))
      (i32.store (get_local $offset) (get_local $len))
    )(else
      (set_local $offset (i32.sub (get_local $offset) (i32.const 4)))
      (set_local $newOffset (call $alloc (get_local $len)))
      (call $copyMem (get_local $offset) (get_local $newOffset) (get_local $len))
      (set_local $len    (i32.sub (get_local $len)    (i32.const 4)))
      (i32.store (get_local $newOffset) (get_local $len))
      (if (i32.eq (get_local $id) (i32.const 0)) (then
        (set_global $partIndexOffset (get_local $newOffset))
      )(else
        (i32.store (i32.add (get_global $partIndexOffset) (i32.mul (get_local $id) (i32.const 4))) (get_local $newOffset))
      ))
    ))
  )
  (func $copyMem (param $fromOffset i32) (param $toOffset i32) (param $len i32)
    (local $delta i32)
    (if (i32.gt_u (get_local $fromOffset) (get_local $toOffset)) (then
      (set_local $delta (i32.const 1))
    )(else
      (set_local $delta (i32.const -1))
      (set_local $len (i32.sub (get_local $len) (i32.const 1)))
      (set_local $fromOffset (i32.add (get_local $fromOffset) (get_local $len)))
      (set_local $toOffset   (i32.add (get_local $toOffset  ) (get_local $len)))
      (set_local $len (i32.add (get_local $len) (i32.const 1)))
    ))
    (block (loop
      (i32.store8 (get_local $toOffset) (i32.load8_u (get_local $fromOffset)))
      (set_local $fromOffset (i32.add (get_local $fromOffset) (get_local $delta)))
      (set_local $toOffset   (i32.add (get_local $toOffset  ) (get_local $delta)))
      (set_local $len (i32.sub (get_local $len) (i32.const 1)))
      (br_if 1 (i32.le_u (get_local $len) (i32.const 0)))
      (br 0)
    ))
  )
  (func $createPart (param $len i32) (result i32)
    (local $id i32)
    (call $resizePart (i32.const 0) (i32.add (call $getPartLength (i32.const 0)) (i32.const 4)))
    (set_local $id (call $getPartCount))
    (i32.store (i32.add (get_global $partIndexOffset) (i32.mul (get_local $id) (i32.const 4))) (call $alloc (get_local $len)))
    (get_local $id)
  )

  (func $init
    (local $displayOffset i32)
    (call $setDisplayMode (get_global $displayWidth) (get_global $displayHeight))
    (call $log (call $pushFromMemory (i32.const 10) (i32.const 22)))
    (set_global $display (call $createPart (i32.mul (i32.const 4) (i32.mul (get_global $displayWidth) (get_global $displayHeight)))))
    (set_local $displayOffset (call $getPartOffset (get_global $display)))
    (call $displayMemory (get_local $displayOffset) (call $getPartLength (get_global $display)))

    (set_global $bgColor (call $rgb (i32.const 0) (i32.const 0) (i32.const 0)))
    (set_global $ballColor (call $rgb (i32.const 255) (i32.const 255) (i32.const 255)))
    (set_global $leftColor (call $rgb (i32.const 0) (i32.const 0) (i32.const 255)))
    (set_global $rightColor (call $rgb (i32.const 255) (i32.const 0) (i32.const 0)))
  )
  (export "init" (func $init))

  (global $left (mut i32) (i32.const 100))
  (global $leftV (mut i32) (i32.const 0))
  (global $leftColor (mut i32) (i32.const 100))
  (global $right (mut i32) (i32.const 100))
  (global $rightV (mut i32) (i32.const 0))
  (global $rightColor (mut i32) (i32.const 100))
  (global $ballX (mut i32) (i32.const 160))
  (global $ballY (mut i32) (i32.const 100))
  (global $ballVX (mut i32) (i32.const 1))
  (global $ballVY (mut i32) (i32.const 0))
  (global $bgColor (mut i32) (i32.const 0))
  (global $ballColor (mut i32) (i32.const 0))
  (global $beep (mut i32) (i32.const 1))
  (func $step (param $t f64)
    (set_global $beep (i32.sub (get_global $beep) (i32.const 1)))
    (if (i32.eq (get_global $beep) (i32.const 0)) (then
      (call $stopTone (i32.const 0) )
    ))
    (call $rect (i32.const 0) (i32.const 0) (get_global $displayWidth) (get_global $displayHeight) (get_global $bgColor))
    (set_global $ballX (i32.add (get_global $ballX) (get_global $ballVX)))
    (set_global $ballY (i32.add (get_global $ballY) (get_global $ballVY)))
    (set_global $left  (i32.add (get_global $left)  (get_global $leftV)))
    (set_global $right (i32.add (get_global $right) (get_global $rightV)))
    (if (i32.le_s (get_global $ballX) (i32.const 8)) (then
      (if (i32.and (i32.ge_s (get_global $ballY) (i32.sub (get_global $left) (i32.const 20))) (i32.le_s (get_global $ballY) (i32.add (get_global $left) (i32.const 20)))) (then
        (set_global $ballVX (i32.mul (get_global $ballVX) (i32.const -1)))
        (set_global $ballVY (i32.add (get_global $ballVY) (get_global $leftV)))
        (call $startTone (i32.const 0) (i32.const 440))
        (set_global $beep (i32.const 4))
      )(else
        (set_global $ballX (i32.const 310))
        (set_global $ballY (get_global $right))
        (set_global $ballVY (i32.div_s (get_global $ballVY) (i32.const 2)))
        (call $startTone (i32.const 0) (i32.const 110))
        (set_global $beep (i32.const 30))
      ))
    ))
    (if (i32.ge_s (get_global $ballX) (i32.const 312)) (then
      (if (i32.and (i32.ge_s (get_global $ballY) (i32.sub (get_global $right) (i32.const 20))) (i32.le_s (get_global $ballY) (i32.add (get_global $right) (i32.const 20)))) (then
        (set_global $ballVX (i32.mul (get_global $ballVX) (i32.const -1)))
        (set_global $ballVY (i32.add (get_global $ballVY) (get_global $rightV)))
        (call $startTone (i32.const 0) (i32.const 440))
        (set_global $beep (i32.const 4))
      )(else
        (set_global $ballX (i32.const 10))
        (set_global $ballY (get_global $left))
        (set_global $ballVY (i32.div_s (get_global $ballVY) (i32.const 2)))
        (call $startTone (i32.const 0) (i32.const 110))
        (set_global $beep (i32.const 30))
      ))
    ))
    (if (i32.and (i32.le_s (get_global $ballY) (i32.const 0)) (i32.lt_s (get_global $ballVY) (i32.const 0))) (then
      (set_global $ballVY (i32.mul (get_global $ballVY) (i32.const -1)))
      (call $startTone (i32.const 0) (i32.const 220))
      (set_global $beep (i32.const 4))
    ))
    (if (i32.and (i32.ge_s (get_global $ballY) (get_global $displayHeight)) (i32.gt_s (get_global $ballVY) (i32.const 0))) (then
      (set_global $ballVY (i32.mul (get_global $ballVY) (i32.const -1)))
      (call $startTone (i32.const 0) (i32.const 220))
      (set_global $beep (i32.const 4))
    ))
    ;; (if (i32.lt_s (get_global $ballVX) (i32.const 0)) (then
    ;;   (set_global $rightV (i32.const 0))
    ;;   (if (i32.lt_s (get_global $ballY) (get_global $left)) (then
    ;;     (set_global $leftV (i32.const -1))
    ;;   )(else
    ;;     (set_global $leftV (i32.const 1))
    ;;   ))
    ;; )(else
    (set_global $leftV (i32.trunc_s/f32 (call $getGameAxisY)))
    (if (call $getGameButtonY) (set_global $left (get_global $right)))
    (set_global $rightV (i32.const 0))
    (if (i32.ge_s (get_global $ballX) (i32.const 160)) (then
      (if (i32.lt_s (get_global $ballY) (get_global $right)) (then
        (set_global $rightV (i32.const -1))
      )(else
        (set_global $rightV (i32.const 1))
      ))
    ))
    (if (call $getMousePressed) (then
      (call $rect (call $getMouseX) (call $getMouseY) (i32.const 8) (i32.const 8) (get_global $ballColor))
    )(else
      (call $rect (call $getMouseX) (call $getMouseY) (i32.const 8) (i32.const 8) (get_global $leftColor))
    ))
    (call $rect (i32.sub (get_global $ballX) (i32.const 4)) (i32.sub (get_global $ballY) (i32.const 4)) (i32.const 8) (i32.const 8) (get_global $ballColor))
    (call $rect (i32.const 0)   (i32.sub (get_global $left)  (i32.const 16)) (i32.const 8) (i32.const 32) (get_global $leftColor))
    (call $rect (i32.const 312) (i32.sub (get_global $right) (i32.const 16)) (i32.const 8) (i32.const 32) (get_global $rightColor))
    (call $displayMemory (call $getPartOffset (get_global $display)) (call $getPartLength (get_global $display)))
  )
  (export "step" (func $step))


  ;; graphics

  (global $display (mut i32) (i32.const -1))
  (global $displayWidth (mut i32) (i32.const 320))
  (global $displayHeight (mut i32) (i32.const 200))
  (func $rgb (param $r i32) (param $g i32) (param $b i32) (result i32)
    (local $c i32)
    (set_local $c (i32.const 255))
    (set_local $c (i32.mul (get_local $c) (i32.const 256)))
    (set_local $c (i32.add (get_local $c) (get_local $b)))
    (set_local $c (i32.mul (get_local $c) (i32.const 256)))
    (set_local $c (i32.add (get_local $c) (get_local $g)))
    (set_local $c (i32.mul (get_local $c) (i32.const 256)))
    (set_local $c (i32.add (get_local $c) (get_local $r)))
    (get_local $c)
  )

  (func $pset (param $x i32) (param $y i32) (param $c i32)
    (local $displayOffset i32)
    ;;(local $displayLength i32)
    (local $i i32)
    (br_if 0 (i32.ge_u (get_local $x) (get_global $displayWidth)))
    (br_if 0 (i32.ge_u (get_local $y) (get_global $displayHeight)))
    (set_local $displayOffset (call $getPartOffset (get_global $display)))
    ;;(set_local $displayLength (call $getPartLength (get_global $display)))
    (set_local $i (i32.mul (i32.const 4) (i32.add (get_local $x) (i32.mul (get_local $y) (get_global $displayWidth)))))
    (i32.store (i32.add (get_local $displayOffset) (get_local $i)) (get_local $c))
  )

  (func $rect (param $x i32) (param $y i32) (param $w i32) (param $h i32) (param $c i32)
    (local $displayOffset i32)
    ;;(local $displayLength i32)
    (local $i i32)
    (local $j i32)
    (br_if 0 (i32.ge_s (get_local $x) (get_global $displayWidth)))
    (br_if 0 (i32.ge_s (get_local $y) (get_global $displayHeight)))
    (br_if 0 (i32.lt_s (i32.add (get_local $x) (get_local $w)) (i32.const 0)))
    (br_if 0 (i32.lt_s (i32.add (get_local $y) (get_local $h)) (i32.const 0)))
    (if (i32.lt_s (get_local $x) (i32.const 0)) (then
      (set_local $w (i32.add (get_local $w) (get_local $x)))
      (set_local $x (i32.const 0))
    ))
    (if (i32.lt_s (get_local $y) (i32.const 0)) (then
      (set_local $h (i32.add (get_local $h) (get_local $y)))
      (set_local $y (i32.const 0))
    ))
    (if (i32.gt_s (i32.add (get_local $x) (get_local $w)) (get_global $displayWidth)) (then
      (set_local $w (i32.sub (get_global $displayWidth) (get_local $x)))))
    (if (i32.gt_s (i32.add (get_local $y) (get_local $h)) (get_global $displayHeight)) (then
      (set_local $h (i32.sub (get_global $displayHeight) (get_local $y)))))
    (set_local $displayOffset (call $getPartOffset (get_global $display)))
    ;;(set_local $displayLength (call $getPartLength (get_global $display)))
    (set_local $i (i32.mul (i32.const 4) (i32.add (get_local $x) (i32.mul (get_local $y) (get_global $displayWidth)))))
    (block (loop
      (br_if 1 (i32.eq (get_local $h) (i32.const 0)))
      (set_local $j (get_local $w))
      (block (loop
        (br_if 1 (i32.eq (get_local $j) (i32.const 0)))
        (i32.store (i32.add (get_local $displayOffset) (get_local $i)) (get_local $c))
        (set_local $i (i32.add (get_local $i) (i32.const 4)))
        (set_local $j (i32.sub (get_local $j) (i32.const 1)))
        (br 0)
      ))
      (set_local $i (i32.sub (i32.add (get_local $i) (i32.mul (i32.const 4) (get_global $displayWidth))) (i32.mul (i32.const 4) (get_local $w))))
      (set_local $h (i32.sub (get_local $h) (i32.const 1)))
      (br 0)
    ))
  )
)